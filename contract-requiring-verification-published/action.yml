name: Verify Contract
description: Run provider verification for a pact
inputs:
  sem-ver:
    description: Version of the package
    required: true
  image-name:
    description: Base image name to store in GCR
    required: true
  gcloud-service-account:
    description: Google Cloud service account
    required: true
  pact-broker-token:
    description: Read/Write token that can be used to deploy/verify pacts at tesouro.pactflow.io
    required: false
  dockerhub-username:
    description: The Dockerhub username for the account that will pull third party images.
    required: true
  dockerhub-access-token:
    description: The PAT for the Dockerhub account.
  pact-url:
    description: The "permalink" URL to the newly published pact (the URL specifying the consumer version URL, rather than the "/latest" format.
    required: true
  provider-version_number:
    description: The provider version number for the verification result
    required: true
  provider-branch:
    description: The repository branch associated with the provider version
    required: true
runs:
  using: composite
  steps:
    - name: Authorize with GCloud
      id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: access_token
        workload_identity_provider: projects/274784588410/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-oidc-provider
        service_account: ${{ inputs.gcloud-service-account }}

    - name: Login to GCR
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Login to Dockerhub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-access-token }}

    # Here, we spin up the container detached. We used to use --exit-code-from, but exit once a specific container was done, but that
    # was recently changed to exit when ANY container was done so in case we have startup or setup containers, we'll do this in a
    # detached fashion :-)
    - name: Start Provider Verification Tests
      working-directory: ./test
      env:
        UNDERTEST_IMAGE: "gcr.io/tesouro-cloud/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}"
        PACT_BROKER_TOKEN: ${{ inputs.pact-broker-token }}
        PROVIDER_APP_VERSION: ${{ inputs.sem-ver }}
        GIT_BRANCH: ${{ github.ref_name }}
        PACT_URL: ${{ inputs.pact-url }}
      shell: bash
      run: |
        # Build pact verification container and associated services
        export CLOUDSDK_PYTHON=python2
        docker-compose -f docker-compose.ci.yml -p test_${{ github.job }} up --build --force-recreate -d

    # Here, we ask docker to wait until the Pact Verifier container is done running
    - name: Wait on Pact Verification
      shell: bash
      if: ${{ inputs.pact-broker-token }}
      run: docker wait test_${{ github.job }}-pact-verifier-1

    - name: Print Docker Logs
      shell: bash
      if: always()
      run: docker compose -p test_${{ github.job }} logs -t > pact_verification_logs.txt

    - name: Archive the Docker Logs
      uses: actions/upload-artifact@v3
      with:
        name: pact_verification_logs
        path: pact_verification_logs.txt

    # should anything go wrong, we always want to nuke the containers and all orphans (startup containers)
    - name: Shut Down Containers
      if: always()
      working-directory: ./test
      shell: bash
      run: docker-compose -f  docker-compose.ci.yml -p test_${{ github.job }} down --remove-orphans --rmi all --volumes

    - name: Report Pact Provider Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Pact Provider Verification
        path: test/tests/bin/pact/*.xml
        reporter: java-junit
