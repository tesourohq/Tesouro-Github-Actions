name: Validate Federation
description: Validate Graphql Schemas for Apollo Federation
inputs:
  test-artifact-name:
    description: s3 name of graphql schema artifact to test
    required: true
  s3-bucket-name:
    description: s3 bucket for graphql schema artifacts
    required: true
  gh-token:
    description: Github token
    required: true
  aws-repository-name:
    description: AWS ECR repository name.
    required: true
  aws-github-role:
    description: AWS role to assume
    required: true
  rover-image-name:
    description: Rover image name
    required: true
  aws-region:
    description: AWS region ECR repository is in.
    required: true
  graphql-router-repository-name:
    description: GraphQL repository name.
    required: true
  sem-ver:
    description: Sem-ver.
    required: true
runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      uses: tesourohq/Tesouro-Github-Actions/common-actions/configure-aws-credentials@main
      with:
        role-to-assume: ${{ inputs.aws-github-role }}
        aws-region: ${{ inputs.aws-region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: tesourohq/Tesouro-Github-Actions/common-actions/amazon-ecr-login@main
    - name: Checkout
      uses: tesourohq/Tesouro-Github-Actions/common-actions/checkout@main
      with:
        fetch-depth: 1
        repository: ${{ inputs.graphql-router-repository-name }}
        token: ${{ inputs.gh-token }}
    - name: Validate-against-latest
      shell: bash
      run: |
        echo '---' >> $GITHUB_STEP_SUMMARY
        echo '### **Validation against latest schema!** ðŸš€' >> $GITHUB_STEP_SUMMARY
        echo '---' >> $GITHUB_STEP_SUMMARY
        aws s3 sync s3://${{ inputs.s3-bucket-name }} ${{ github.workspace }}/schema-latest
        yqvar="/schema/ci-${{ inputs.sem-ver }}-${{inputs.test-artifact-name}}-subgraph.graphql"
        myYQvar="${yqvar}" yq -i ".subgraphs.${{inputs.test-artifact-name}}.schema.file = env(myYQvar)" ${{github.workspace}}/supergraph-config.yml
        docker run --name latest -d -v ${{github.workspace}}/schema-latest:/schema -v ${{ github.workspace }}/supergraph-config.yml:/dist/config/supergraph-config.yml ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.rover-image-name }}:latest
        docker logs -f latest &> ${{github.workspace}}/schema-latest/federate-latest.logs
        cat ${{github.workspace}}/schema-latest/federate-latest.logs
        cat ${{github.workspace}}/schema-latest/federate-latest.logs >> $GITHUB_STEP_SUMMARY
        echo '   ' >> $GITHUB_STEP_SUMMARY
    - name: Archive generated supergraph-latest
      uses: tesourohq/Tesouro-Github-Actions/common-actions/upload-artifact@main
      with:
        name: latest-supergraph-schema.graphql
        path: ${{github.workspace}}/schema-latest/supergraph-schema.graphql
    - name: Validate-against-deployed
      shell: bash
      run: |
        echo '---' >> $GITHUB_STEP_SUMMARY
        echo '### **Validation against deployed schema!** ðŸš€' >> $GITHUB_STEP_SUMMARY
        echo '---' >> $GITHUB_STEP_SUMMARY
        cp ${{ github.workspace }}/schema-latest/ci-${{ inputs.sem-ver }}-${{inputs.test-artifact-name}}-subgraph.graphql ${{ github.workspace }}/schema/ci-${{ inputs.sem-ver }}-${{inputs.test-artifact-name}}-subgraph.graphql
        docker run --name deployed -d -v ${{github.workspace}}/schema:/schema -v ${{ github.workspace }}/supergraph-config.yml:/dist/config/supergraph-config.yml ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.rover-image-name }}:latest
        docker logs -f deployed &> ${{github.workspace}}/schema/federate-deployed.logs
        cat ${{github.workspace}}/schema/federate-deployed.logs
        cat ${{github.workspace}}/schema/federate-deployed.logs >> $GITHUB_STEP_SUMMARY
    - name: Archive generated supergraph-deployed
      uses: tesourohq/Tesouro-Github-Actions/common-actions/upload-artifact@main
      with:
        name: deployed-supergraph-schema.graphql
        path: ${{github.workspace}}/schema/supergraph-schema.graphql
    - name: Exit status check
      shell: bash
      run: |
        if [ $(contains(github.event.issue.labels.*.name, 'expected-breaking-federation-validation')) ]; then exit 0; fi
        if [ $(docker wait deployed) == 1 ] || [ $(docker wait latest) == 1 ]; then exit 1; fi