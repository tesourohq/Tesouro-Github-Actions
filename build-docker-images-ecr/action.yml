name: Build docker images ecr
description: Build docker images ecr
inputs:
  sem-ver:
    description: Version of the package
    required: true
  AssemblySemVer:
    description: Version of the Assembly
    required: true
  gh-packages-token:
    description: Github packages token
    required: true
  dockerfile-path:
    description: The location of the project Dockerfile
    required: true
  image-name:
    description: Base image name to store in ECR
    required: true
  aws-github-role:
    description: AWS role to assume
    required: true
  aws-region:
    description: AWS region ECR repository is in.
    required: true
  aws-repository-name:
    description: AWS ECR repository name.
    required: true
  docker-context:
    description: The context folder where the image is built
    required: true
  platform:
    description: The platform to target for the build
    default: linux/arm64
  dockerhub-username:
    description: The Dockerhub username for the account that will pull third party images.
    required: true
  dockerhub-access-token:
    description: The PAT for the Dockerhub account.
outputs:
  image-tag:
    description: The tag (other than 'latest') applied to the image and pushed.
    value: ${{ inputs.sem-ver }}
  image-name:
    description: The full name of the image that was built and pushed.
    value: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}
runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-access-token }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-github-role }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        platforms: ${{ inputs.platform }}
        push: false
        load: true
        file: ${{ inputs.dockerfile-path }}/Dockerfile
        build-args: |
          ASSEMBLY_VERSION=${{ inputs.AssemblySemVer }}
          GH_PACKAGES_TOKEN=${{ inputs.gh-packages-token }}
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}
    
    - name: Where My Images At?
      shell: bash
      run: |
        docker images
         
    # TODO: I want this step to fail if critical CVEs are found.
    - name: Scan Image - Docker Scout
      uses: docker/scout-action@v1
      with:
        command: cves
        image: local://${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
        only-severities: critical
        only-fixed: true
        sarif-file: 'scout-results.sarif'
        exit-code: true
    
    - name: Post Scan Results - Docker Scout
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'scout-results.sarif'
    
    - name: Scan Image - Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        scanners: vuln
        image-ref: local://${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
        severity: CRITICAL
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
    
    - name: Post Scan Results - Trivy
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # This will not build the image again. It sees the local image and just pushes that (ref: https://docs.docker.com/build/ci/github-actions/test-before-push/).
    - name: Push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        platforms: ${{ inputs.platform }}
        push: true
        file: ${{ inputs.dockerfile-path }}/Dockerfile
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}