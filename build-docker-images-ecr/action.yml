name: Build docker images ecr
description: Build docker images ecr
inputs:
  sem-ver:
    description: Version of the package
    required: true
  AssemblySemVer:
    description: Version of the Assembly
    required: true
  gh-packages-token:
    description: Github packages token
    required: true
  dockerfile-path:
    description: The location of the project Dockerfile
    required: true
  image-name:
    description: Base image name to store in ECR
    required: true
  aws-github-role:
    description: AWS role to assume
    required: true
  aws-region:
    description: AWS region ECR repository is in.
    required: true
  aws-repository-name:
    description: AWS ECR repository name.
    required: true
  docker-context:
    description: The context folder where the image is built
    required: true
  platform:
    description: The platform to target for the build
    default: linux/arm64
  dockerhub-username:
    description: The Dockerhub username for the account that will pull third party images.
    required: true
  dockerhub-access-token:
    description: The PAT for the Dockerhub account.
outputs:
  image-tag:
    description: The tag (other than 'latest') applied to the image and pushed.
    value: ${{ inputs.sem-ver }}
  image-name:
    description: The full name of the image that was built and pushed.
    value: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}
  image-name-without-tag:
    description: The name of the image sans the tag.
    value: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}
runs:
  using: composite
  steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-access-token }}
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-github-role }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # https://github.com/docker/build-push-action
    - name: Build
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        platforms: ${{ inputs.platform }}
        push: false
        load: true
        provenance: false
        file: ${{ inputs.dockerfile-path }}/Dockerfile
        build-args: |
          ASSEMBLY_VERSION=${{ inputs.AssemblySemVer }}
          GH_PACKAGES_TOKEN=${{ inputs.gh-packages-token }}
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Pull Trivy Files
      shell: bash
      run: |
        wget -L https://raw.githubusercontent.com/tesourohq/Tesouro-Github-Actions/main/build-docker-images-ecr/trivy-report.tpl
        wget -L https://raw.githubusercontent.com/tesourohq/Tesouro-Github-Actions/main/build-docker-images-ecr/.trivyignores
    
    # https://github.com/aquasecurity/trivy-action
    - name: Scan Image
      id: scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
        scan-type: image
        scanners: 'vuln'
        vuln-type: 'os,library'
        severity: 'CRITICAL'
        ignore-unfixed: true
        format: 'template'
        template: "@/github/workspace/trivy-report.tpl"
        output: trivy-report.md 
        trivyignores: ".trivyignores"
        exit-code: '1'
        timeout: '30m'
      
    - name: Print Scan to Summary
      shell: bash
      run: cat trivy-report.md >> $GITHUB_STEP_SUMMARY
      if: always()

    - name: Push
      if: steps.build.outcome == 'success' && steps.scan.outcome == 'success'
      shell: bash
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-repository-name }}/${{ inputs.image-name }}${{ github.event_name == 'pull_request' && '-ci' || '' }}:${{ inputs.sem-ver }}
