name: ArgoCD Deploy
description: Deploy using ArgoCD
inputs:
  argocd-application-name:
    description: ArgoCD application name, must match the application manifest.
    required: true
  argo-ci-username:
    description: The username for the ArgoCD account that calls sync for stage.
    required: true
  argo-ci-password:
    description: The password for the ArgoCD account that calls sync for stage.
    required: true
  argocd-host:
    description: ArgoCD host.
    required: true
  github-token:
    description: CI github token.
    required: true
  ci-username:
    description: CI github username.
    required: true
  ci-email:
    description: CI github email.
    required: true
  semver:
    description: Semantic Version.
    required: true
  image-name:
    description: Tagged image name to be deployed.
    required: true
  path-to-version-patch:
    description: Path to kubernetes kustomize base deployment yaml.
    required: false
    default: ''
  path-to-overlays:
    description: Path to kubernetes kustomize overlays.
    required: true
  service-name:
    description: Path from the project root to the database migration kustomize overlays.
    required: false
    default: ''
  versioned-image-names:
    description: Space delimited list of image names to be versioned on deploy.
    required: false
    default: ''
runs:
  using: composite
  steps:
    - name: CheckoutRepo
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}
        fetch-depth: 0

    - name: Set uid
      shell: bash
      id: uid
      run: |
        uuid=$(uuidgen)
        trunc_uuid=${uuid:0:4}
        echo "short_uuid=$trunc_uuid" >> $GITHUB_OUTPUT

    # Commit and push.
    - name: Apply semver-sha to version
      shell: bash
      # Only run on main branch push (e.g. pull request merge).
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "${{ inputs.ci-username }}"
        git config --global user.email "${{ inputs.ci-email }}"
        git checkout release
        git merge -Xtheirs --no-commit main

    - name: Version microservice
      shell: bash
      if: github.ref == 'refs/heads/main' && inputs.path-to-version-patch != ''
      run: |
        yq -i '.spec.template.metadata.labels.version = "${{ inputs.semver }}.${{ steps.uid.outputs.short_uuid }}"' ${{ inputs.path-to-version-patch }}
        yq -i '.spec.template.spec.containers[0].image = "${{ inputs.image-name }}"' ${{ inputs.path-to-version-patch }}

    - name: Version overlays
      shell: bash
      if: github.ref == 'refs/heads/main' && inputs.path-to-overlays != ''
      run: |
        for dir in ${{ inputs.path-to-overlays }}*/; do yq e '.labels.[0].pairs.semver = "${{ inputs.semver }}"' -i "$dir""kustomization.yaml"; yq e '.labels.[0].pairs."app.kubernetes.io/version" = "${{ inputs.semver }}"' -i "$dir""kustomization.yaml"; done

    - name: Version images
      shell: bash
      if: github.ref == 'refs/heads/main' && inputs.path-to-overlays != '' && inputs.versioned-image-names != ''
      run: |
        NAMES=${{ inputs.versioned-image-names }}
        for dir in ${{ inputs.path-to-overlays }}*/; do yq -i 'del(.images)' "$dir""kustomization.yaml"; for name in ${NAMES[@]}; do export n="$name"; yq -i '.images += [{"name": env(n)} + {"newTag": "${{ inputs.semver }}"}]' "$dir""kustomization.yaml"; done; done

    - name: Commit and push
      shell: bash
      # Only run on main branch push (e.g. pull request merge).
      if: github.ref == 'refs/heads/main'
      run: |
        git commit -a -m "Version ${{ inputs.semver }}.${{ steps.uid.outputs.short_uuid }}"
        git push

    - name: Deploy
      if: github.ref == 'refs/heads/main' # Only on main.
      id: argocd-deploy
      shell: bash
      run: |
        USER_NAME=${{ inputs.argo-ci-username }}
        PASSWORD=${{ inputs.argo-ci-password }}
        ARGOCD_SERVER=${{ inputs.argocd-host }}
        JSON=$(jq -c -n --arg username "$USER_NAME" --arg password "$PASSWORD" '$ARGS.named')
        TOKEN=$(curl -k $ARGOCD_SERVER/api/v1/session -H "Content-Type: application/json" -d "$JSON" | jq -r ".token")
        curl -s -X POST "${{ inputs.argocd-host }}/api/v1/applications/${{ inputs.argocd-application-name }}/sync" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" | jq
      