name: ArgoCD Deploy
description: Deploy using ArgoCD
inputs:
  argocd-application-name:
    description: ArgoCD application name, must match the application manifest.
    required: true
  argocd-apikey:
    description: ArgoCD service account api-key.
    required: true
  argocd-host:
    description: ArgoCD host.
    required: true
  github-token:
    description: CI github token.
    required: true
  ci-username:
    description: CI github username.
    required: true
  ci-email:
    description: CI github email.
    required: true
  semver:
    description: Semantic Version.
    required: true
  image-name:
    description: Tagged image name to be deployed.
    required: true
  path-to-version-patch:
    description: Path to kubernetes base deployment yaml.
    required: true
  app-id:
    description: App ID to use.
    required: true
  app-pem:
    description: App pem to use.
    required: true
runs:
  using: composite
  steps:
    - name: Generate a token
      id: generate_token
      uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
      with:
        app_id: ${{ inputs.app-id }}
        private_key: ${{ inputs.app-pem }}

    #We are locking the main branch so that the deployment can run without getting clobbered by the next.
    - name: Lock the main branch
      env:
        token: ${{ steps.generate_token.outputs.token }}
        repo: ${{ github.repository }}
      shell: bash
      if: github.ref == 'refs/heads/main
      run: |
        jsonbody=$(curl -s -L \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: token $token" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/$repo/branches/main/protection \
        | jq '.lock_branch.enabled = true' \
        | jq 'del(.url, .required_signatures.url, .enforce_admins.url, .required_pull_request_reviews.url, .required_status_checks.url, .required_status_checks.contexts_url, .required_status_checks.checks)' \
        | jq '. += { "restrictions": null }' \
        | jq '.enforce_admins.enabled as $ea | .enforce_admins = $ea | .lock_branch.enabled as $lb | .lock_branch = $lb | .allow_fork_syncing.enabled as $afs | .allow_fork_syncing = $afs | .allow_force_pushes.enabled as $afp | .allow_force_pushes = $afp | .require_linear_history.enabled as $rlh | .require_linear_history = $rlh | .allow_deletions.enabled as $ad | .allow_deletions = $ad | .required_signatures.enabled as $rs | .required_signatures = $rs | .required_linear_history.enabled as $rlh | .required_linear_history = $rlh | .required_conversation_resolution.enabled as $rcr | .required_conversation_resolution = $rcr | .block_creations.enabled as $bc | .block_creations = $bc')
        curl -s -L \
        -X PUT \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: token $token"\
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/$repo/branches/main/protection \
        -d $jsonbody

    - name: CheckoutRepo
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}
        fetch-depth: 0

    # Commit and push.
    - name: Apply semver-sha to version
      shell: bash
      # Only run on main branch push (e.g. pull request merge).
      if: github.event_name == 'push' && github.ref == 'refs/heads/main
      run: |
        git config --global user.name "${{ inputs.ci-username }}"
        git config --global user.email "${{ inputs.ci-email }}"
        git checkout release
        git merge --no-commit main
        yq -i '.spec.template.metadata.labels.version = "${{ inputs.semver }}.${{ github.run_attempt }}-${{ github.sha }}"' ${{ inputs.path-to-version-patch }}
        yq -i '.spec.template.spec.containers[0].image = "${{ inputs.image-name }}"' ${{ inputs.path-to-version-patch }}
        git commit -a -m "Version ${{ inputs.semver }}.${{ github.run_attempt }}-${{ github.sha }}"
        git push

    - name: Deploy
      if: github.ref == 'refs/heads/main' # Only on main.
      id: argocd-deploy
      shell: bash
      run: |
        curl -s -X POST "${{ inputs.argocd-host }}/api/v1/applications/${{ inputs.argocd-application-name }}/sync" -H "Authorization: Bearer ${{ inputs.argocd-apikey }}" | jq