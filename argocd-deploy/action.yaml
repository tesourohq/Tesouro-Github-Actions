name: ArgoCD Deploy
description: Deploy using ArgoCD
inputs:
  argocd-application-name:
    description: ArgoCD application name, must match the application manifest.
    required: true
  argocd-apikey:
    description: ArgoCD service account api-key.
    required: true
  argocd-host:
    description: ArgoCD host.
    required: true
  github-token:
    description: CI github token.
    required: true
  ci-username:
    description: CI github username.
    required: true
  ci-email:
    description: CI github email.
    required: true
  semver:
    description: Semantic Version.
    required: true
  image-name:
    description: Tagged image name to be deployed.
    required: true
  path-to-version-patch:
    description: Path to kubernetes kustomize base deployment yaml.
    required: true
  path-to-overlays:
    description: Path to kubernetes kustomize overlays.
    required: true
  app-id:
    description: App ID to use.
    required: true
  app-pem:
    description: App pem to use.
    required: true
  path-to-db-base:
    description: Path from the project root to the database migration kustomize base.
    required: false
    default: ''
  path-to-db-overlays:
    description: Path from the project root to the database migration kustomize overlays.
    required: false
    default: ''
runs:
  using: composite
  steps:
    - name: CheckoutRepo
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}
        fetch-depth: 0

    - name: Set short sha
      shell: bash
      id: shortsha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # Commit and push.
    - name: Apply semver-sha to version
      shell: bash
      # Only run on main branch push (e.g. pull request merge).
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "${{ inputs.ci-username }}"
        git config --global user.email "${{ inputs.ci-email }}"
        git checkout release
        git merge -X theirs --no-commit main
        yq -i '.spec.template.metadata.labels.version = "${{ inputs.semver }}.${{ github.run_attempt }}-${{ github.sha }}"' ${{ inputs.path-to-version-patch }}
        for dir in ${{ inputs.path-to-overlays }}*/; do yq e '.labels.[1].pairs.semver = "${{ inputs.semver }}"' -i "$dir""kustomization.yaml"; done
        yq -i '.spec.template.spec.containers[0].image = "${{ inputs.image-name }}"' ${{ inputs.path-to-version-patch }}
    
    - name: Version db name
      shell: bash
      if: github.ref == 'refs/heads/main' && inputs.path-to-db-overlays != '' && inputs.path-to-db-base != ''
      run: |
        yq -i '.metadata.name = "payment-processing-database-job-${{ steps.shortsha.outputs.sha_short }}-${{github.run_attempt}}"' ${{ inputs.path-to-db-base }}job.yaml
        yq -i '.labels[0].pairs.app = "payment-processing-database-job-${{ steps.shortsha.outputs.sha_short }}-${{github.run_attempt}}"' ${{ inputs.path-to-db-base }}kustomization.yaml
        yq -i '.metadata.name = "payment-processing-database-job-${{ steps.shortsha.outputs.sha_short }}-${{github.run_attempt}}"' ${{ inputs.path-to-db-overlays }}prod/job.yaml

    - name: Commit and push
      shell: bash
      # Only run on main branch push (e.g. pull request merge).
      if: github.ref == 'refs/heads/main'
      run: |
        git commit -a -m "Version ${{ inputs.semver }}.${{ github.run_attempt }}-${{ github.sha }}"
        git push

    - name: Deploy
      if: github.ref == 'refs/heads/main' # Only on main.
      id: argocd-deploy
      shell: bash
      run: |
        curl -s -X POST "${{ inputs.argocd-host }}/api/v1/applications/${{ inputs.argocd-application-name }}/sync" -H "Authorization: Bearer ${{ inputs.argocd-apikey }}" | jq